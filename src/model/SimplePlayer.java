package model;

import model.enumeration.BetType;
import model.interfaces.Player;

public class SimplePlayer implements Player {

    private String playerId;

    private String playerName;

    private int points;

    private int bet;

    private BetType betType;

    private static int uniqueId = 0;

    public SimplePlayer(String playerId, String playerName, int initialPoints) {
        this.playerId = playerId;
        this.playerName = playerName;
        this.points = initialPoints;
    }

    public SimplePlayer(String playerName, int points) {
        this.playerName = playerName;
        this.points = points;
        this.playerId = String.valueOf(uniqueId++);
    }

    /**
     * @return - human readable player name
     */
    @Override
    public String getPlayerName() {
        return this.playerName;
    }

    /**
     * @param playerName - human readable player name
     */
    @Override
    public void setPlayerName(String playerName) {
        this.playerName = playerName;
    }

    /**
     * @return - number of points from setPoints()
     */
    @Override
    public int getPoints() {
        return this.points;
    }

    /**
     * @param points - for betting (updated by GameEngineImpl via BetType enum with each win or loss)
     */
    @Override
    public void setPoints(int points) {
        this.points = points;
    }

    /**
     * @return - the player ID which is generated by the implementing class
     */
    @Override
    public String getPlayerId() {
        return this.playerId;
    }

    /**
     * <b>NOTE:</b> must use resetBet() for 0 bet since not valid for this method
     *
     * @param bet - the bet in points
     * @return true - if bet is greater than 0 and player has sufficient points to place the bet<br>
     */
    @Override
    public boolean setBet(int bet) {
        if (bet > 0 && this.points >= bet) {
            this.bet = bet;
            return true;
        }
        return false;
    }

    /**
     * @return the bet as set with setBet()
     */
    @Override
    public int getBet() {
        return this.bet;
    }

    /**
     * @param betType - enum representing the type of bet being placed
     */
    @Override
    public void setBetType(BetType betType) {
        this.betType = betType;
    }

    /**
     * @return - the betType as set with setBetType()
     */
    @Override
    public BetType getBetType() {
        return this.betType;
    }

    /**
     * reset the bet to 0 for next round (in case player does not bet again in next round)
     */
    @Override
    public void resetBet() {
        this.bet = 0;
    }

    /**
     * @return - a human readable String that lists the values of this Player<br>
     * <br>
     * e.g "Player: id=1, name=Come In Spinner, bet=100, betType=RED, points=900"<br>
     *     (see OutputTrace.txt)
     */
    @Override
    public String toString() {
        return String.format("Player: id=%s, name:%s, bet=%s, betType=%s, points=%d", this.playerId, this.playerName, this.bet, this.betType, this.points);
    }
}
